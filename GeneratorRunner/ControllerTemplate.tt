<#@ template language="C#" inherits="BaseTextTemplate" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="TypescriptModel.Controller" #>
<#+
	public ControllerModel Model { get; set; }

	protected string GetMethodName(MethodModel methodModel)
    {
        var name = methodModel.Name.ToLower();
        switch (name)
        {
            case "get":
                return "getBy" + GetPascalCase(methodModel.Parameters.FirstOrDefault()?.Name);
            case "post":
                return "post" + GetPascalCase(methodModel.Parameters.FirstOrDefault()?.Name);
            case "put":
                var parameter = methodModel.Parameters.FirstOrDefault();
                if (methodModel.Parameters.Count > 1 && parameter?.Name.ToLower() == "id")
                    parameter = methodModel.Parameters[1];
                return "put" + GetPascalCase(parameter?.Name);
			default:
				return GetCamelCase(methodModel.Name);
        }
    }

    protected string BuildParams(MethodModel methodModel)
    {
        var sb = new StringBuilder();
        foreach (var parameterInfo in methodModel.Parameters)
        {
            sb.Append($"{parameterInfo.Name}: {parameterInfo.TsType}, ");
        }
        if (sb.Length > 0)
            sb.Remove(sb.Length - 2, 2);
        return sb.ToString();
    }
    protected string BuildCallParams(MethodModel methodModel)
    {
        var sb = new StringBuilder();
        foreach (var parameterInfo in methodModel.Parameters)
        {
            sb.Append($"{parameterInfo.Name}, ");
        }
        if (sb.Length > 0)
            sb.Remove(sb.Length - 2, 2);
        return sb.ToString();
    }

    protected string FixRouteParameters(string route)
    {
        var result = "'" + route.Replace("{", "' + ").Replace("}", " + '");
        if (result.EndsWith(" + '"))
            result = result.Substring(0, result.Length - 3);
        else
            result = result + "'";
        return result;
    }

	protected string GetUrlAdjust(ParameterModel p)
	{
		return p.IsComplex
			? $"this._addParam({p.Name});"
			: $"'{p.Name}=' + this._encode({p.Name}) + '&';";
	}

    protected void WriteUrlBuilder()
    { #>
    urlBuilder = {
<#+ foreach (var method in Model.Methods) {#>
        <#= GetMethodName(method) #>(<#=BuildParams(method) #>) {
            var url = <#= FixRouteParameters(method.Route)#>;
            var params = '';
<#+ foreach (var p in method.Parameters.Where(prm => prm.ParameterType == ParameterType.QueryString)) {#>
            params = params + <#= GetUrlAdjust(p) #>
<#+ } #>
            return this._getUrl(url, params);
        },
<#+ } #>

        _domain: Global.host + Global.<#= Model.Module #>,
        _addParam(p: any) {
            var result = '';
            if (p) {
                for (var propertyName in p) {
                    if (p[propertyName] && !(p[propertyName] instanceof Function) && ((p[propertyName] != ''))) {
                        result = result + propertyName + '=' + this._encode(p[propertyName]) + '&';
                    }
                }
            }
            return result;
        },
        _encode(p: any) {
            if (p instanceof Date) {
				var month = p.getMonth() + 1;
				month = month <= 9 ? '0' + month : month;
				var day = p.getDate();
				day = day <= 9 ? '0' + day : day;
                return p.getFullYear() + '-' + month + '-' + day;
			} else {
                return encodeURIComponent(p);
			}
        },
        _getUrl(baseUrl: string, params: string) {
            var result = this._domain + '/' + baseUrl
            if (params.length > 0) {
                result = result + '?' + params.slice(0, -1);
            }
            return result;
        }
    }
        
<#+    
	}
#>

